{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOTTqjjghvqM1wfKqSmhKfS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install streamlit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPDzsTZHgC1D","executionInfo":{"status":"ok","timestamp":1743412816279,"user_tz":-330,"elapsed":6462,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"00b0305a-4c25-4255-8c46-a1425708071b"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting streamlit\n","  Downloading streamlit-1.44.0-py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.1.0)\n","Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.0.0)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.12.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.31.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2024.10.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.23.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n","Downloading streamlit-1.44.0-py3-none-any.whl (9.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.8/9.8 MB\u001b[0m \u001b[31m38.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m56.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 streamlit-1.44.0 watchdog-6.0.0\n"]}]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5UE110O58j-Y","executionInfo":{"status":"ok","timestamp":1743412820014,"user_tz":-330,"elapsed":1296,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"1cd26423-52ae-47ec-8e34-ceb0e8c6a760"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Laminate A-matrix (psi·in):\n","[[136210.47391445  30451.7625306  -47047.80371499]\n"," [ 30451.7625306  136210.47391445 -47047.80371499]\n"," [-47047.80371499 -47047.80371499 113266.21138385]]\n","\n","Laminate B-matrix (psi·in^2):\n","[[-112.42500435 -122.81401423  235.23901857]\n"," [-122.81401423  358.0530328   235.23901857]\n"," [ 235.23901857  235.23901857 -491.25605692]]\n","\n","Laminate D-matrix (psi·in^3):\n","[[ 1.17306127  0.77566057 -1.27421135]\n"," [ 0.77566057  3.52545146 -1.27421135]\n"," [-1.27421135 -1.27421135  2.94250156]]\n","\n","Thermal Force Resultants, N_T (lb/in):\n","[-101.23236888 -101.23236888  512.95280332]\n","\n","Thermal Moment Resultants, M_T (lb):\n","[ 1.17826991  0.96056088 -2.56476402]\n","\n","Midplane strains ε0:\n","[0.00066792 0.00396943 0.00412145]\n","Curvatures κ:\n","[ 0.36356106 -0.71825734 -0.70787436]\n","\n","Ply Strains in Global Axes (Top/Bottom)\n","Ply\\tLoc\\t\\tεx\\t\\tεy\\t\\tγxy\n","-45\tTop\t\t-2.409840e-04\t5.765071e-03\t5.891132e-03\n","-45\tBot\t\t-2.058789e-03\t9.356358e-03\t9.430504e-03\n","+0\tTop\t\t1.576821e-03\t2.173784e-03\t2.351760e-03\n","+0\tBot\t\t-2.409840e-04\t5.765071e-03\t5.891132e-03\n","+90\tTop\t\t3.394627e-03\t-1.417503e-03\t-1.187612e-03\n","+90\tBot\t\t1.576821e-03\t2.173784e-03\t2.351760e-03\n","\n","Ply Stresses in Global Axes (Top/Bottom) [psi]\n","Ply\\tLoc\\t\\tσx\\t\\tσy\\t\\tτxy\n","-45\tTop\t\t9019.14\t12025.17\t-32910.60\n","-45\tBot\t\t-15786.00\t-10072.72\t23494.15\n","+0\tTop\t\t29435.47\t-8400.43\t2354.11\n","+0\tBot\t\t-5742.99\t-4414.33\t5897.02\n","+90\tTop\t\t-7978.33\t-30354.32\t-1188.80\n","+90\tBot\t\t-8947.29\t41216.64\t2354.11\n","\n","Optionally, transform these to local (ply) axes if needed:\n"]}],"source":["import numpy as np\n","import streamlit as st\n","\n","# ==========================\n","# 1) INPUTS & MATERIAL DATA\n","# ==========================\n","\n","# Material properties for AS4/3501-6\n","E1    = 20.01e6     # psi\n","E2    = 1.301e6     # psi\n","G12   = 1.001e6     # psi\n","nu12  = 0.3\n","# (Often denoted nu21 = (nu12 * E2)/E1, but problem states ~0.02, not needed below.)\n","\n","# Thermal expansion coefficients (local ply coords)\n","alpha1 = -0.072e-6  # 1/°F (fiber direction)\n","alpha2 =  32.4e-6   # 1/°F (transverse direction)\n","\n","# Processed at 350°F, cooled to 70°F\n","# In the user’s code, delta_T = 350 - 70 = +280\n","# This implies a \"shrink\" in fiber direction if alpha1 < 0\n","delta_T = 350.0 - 70.0  # °F\n","\n","# Ply thickness\n","ply_thickness = 0.005   # inches\n","\n","# Stacking sequence (in degrees)\n","stacking_sequence = [-45, 0, 90]\n","\n","# Number of plies\n","n_plies = len(stacking_sequence)\n","\n","# Total laminate thickness\n","h = n_plies * ply_thickness\n","\n","# Define z-coordinates for top/bottom of each ply\n","# z[0] = bottom of ply1, z[1] = bottom of ply2, etc.\n","# We'll assume mid-plane is z=0, so half the thickness is above/below.\n","z_coords = np.linspace(-h/2, h/2, n_plies + 1)  # length = n_plies+1\n","\n","# ==========================\n","# 2) BUILD PLY STIFFNESS\n","# ==========================\n","\n","# Compliance matrix in material (ply) coordinates\n","# S = [ [1/E1, -nu12/E1,   0    ],\n","#       [-nu12/E1, 1/E2,   0    ],\n","#       [   0,        0, 1/G12 ] ]\n","S = np.array([\n","    [1.0/E1,       -nu12/E1,   0.0],\n","    [-nu12/E1,     1.0/E2,     0.0],\n","    [0.0,          0.0,        1.0/G12]\n","])\n","\n","# Inverse to get Q in material coords\n","Q_mat = np.linalg.inv(S)\n","\n","def transform_Q(theta_deg, Q_local):\n","    \"\"\"\n","    Returns Q_bar, the transformed stiffness matrix for a ply at angle theta.\n","    Q_local is the [Q] in material coordinates.\n","    \"\"\"\n","    theta = np.radians(theta_deg)\n","    c = np.cos(theta)\n","    s = np.sin(theta)\n","\n","    # Transformation matrix for in-plane stresses/strains\n","    T = np.array([\n","        [ c**2,   s**2,   2*c*s ],\n","        [ s**2,   c**2,  -2*c*s ],\n","        [-c*s,    c*s,    c**2 - s**2 ]\n","    ])\n","\n","    # Q_bar = [T]^-1 * [Q_local] * [T]^-T\n","    # But for in-plane, an equivalent approach is T.T @ Q_local @ T\n","    # as used in many references:\n","    Q_bar = T.T @ Q_local @ T\n","    return Q_bar\n","\n","# ==========================\n","# 3) TRANSFORM THERMAL EXPANSION\n","# ==========================\n","\n","def alpha_bar(theta_deg, a1, a2):\n","    \"\"\"\n","    Transforms local thermal expansion [alpha1, alpha2, 0]\n","    into global laminate coordinates [alpha_x, alpha_y, alpha_xy].\n","    \"\"\"\n","    theta = np.radians(theta_deg)\n","    c = np.cos(theta)\n","    s = np.sin(theta)\n","\n","    # Standard in-plane transformation for thermal expansion:\n","    alpha_x   = a1 * c**2 + a2 * s**2\n","    alpha_y   = a1 * s**2 + a2 * c**2\n","    alpha_xy  = 2.0*(a1 - a2)*c*s\n","\n","    return np.array([alpha_x, alpha_y, alpha_xy])\n","\n","# ==========================\n","# 4) COMPUTE [A], [B], [D]\n","# ==========================\n","\n","A = np.zeros((3,3))\n","B = np.zeros((3,3))\n","D = np.zeros((3,3))\n","\n","for k in range(n_plies):\n","    theta_k = stacking_sequence[k]\n","    Q_bar_k = transform_Q(theta_k, Q_mat)\n","\n","    z_bot = z_coords[k]\n","    z_top = z_coords[k+1]\n","\n","    # (z_k - z_{k-1}) = thickness of ply k\n","    dz = (z_top - z_bot)\n","\n","    # A = sum( Q_bar_k * dz )\n","    A += Q_bar_k * dz\n","\n","    # B = 1/2 sum( Q_bar_k * (z_k^2 - z_{k-1}^2) )\n","    B += 0.5 * Q_bar_k * (z_top**2 - z_bot**2)\n","\n","    # D = 1/3 sum( Q_bar_k * (z_k^3 - z_{k-1}^3) )\n","    D += (1.0/3.0) * Q_bar_k * (z_top**3 - z_bot**3)\n","\n","# ==========================\n","# 5) COMPUTE THERMAL LOADS (N_T, M_T)\n","# ==========================\n","\n","N_T = np.zeros((3,1))\n","M_T = np.zeros((3,1))\n","\n","for k in range(n_plies):\n","    theta_k = stacking_sequence[k]\n","    Q_bar_k = transform_Q(theta_k, Q_mat)\n","\n","    z_bot = z_coords[k]\n","    z_top = z_coords[k+1]\n","    dz = (z_top - z_bot)\n","\n","    # alpha_bar_k in laminate coords\n","    ab_k = alpha_bar(theta_k, alpha1, alpha2).reshape((3,1))\n","\n","    # Ply-level Q_bar * alpha_bar\n","    Q_bar_alpha = Q_bar_k @ ab_k\n","\n","    # N_T,k = [Q_bar_k * alpha_bar_k] * (z_k - z_{k-1}) * dT\n","    N_T += Q_bar_alpha * dz * delta_T\n","\n","    # M_T,k = 1/2 [Q_bar_k * alpha_bar_k] * (z_k^2 - z_{k-1}^2) * dT\n","    M_T += 0.5 * Q_bar_alpha * (z_top**2 - z_bot**2) * delta_T\n","\n","# Assemble ABD matrix\n","ABD = np.block([\n","    [A, B],\n","    [B, D]\n","])\n","\n","# ==========================\n","# 6) SOLVE FOR MIDPLANE STRAINS & CURVATURES\n","# ==========================\n","NM = np.vstack((N_T, M_T))  # 6x1 vector\n","inv_ABD = np.linalg.inv(ABD)  # 6x6\n","eps_kappa = inv_ABD @ NM     # 6x1\n","\n","# Midplane strains (epsilon_0) and curvatures (kappa)\n","epsilon_0 = eps_kappa[:3].reshape((3,1))  # [εx0, εy0, γxy0]\n","kappa     = eps_kappa[3:].reshape((3,1))  # [κx, κy, κxy]\n","\n","# ==========================\n","# 7) PER-PLY STRESSES & STRAINS\n","# ==========================\n","# We'll compute them at TOP and BOTTOM of each ply to match typical tables.\n","\n","print(f\"\\nLaminate A-matrix (psi·in):\\n{A}\")\n","\n","print(f\"\\nLaminate B-matrix (psi·in^2):\\n{B}\")\n","print(f\"\\nLaminate D-matrix (psi·in^3):\\n{D}\")\n","print(f\"\\nThermal Force Resultants, N_T (lb/in):\\n{N_T.flatten()}\")\n","print(f\"\\nThermal Moment Resultants, M_T (lb):\\n{M_T.flatten()}\")\n","print(f\"\\nMidplane strains ε0:\\n{epsilon_0.flatten()}\")\n","print(f\"Curvatures κ:\\n{kappa.flatten()}\\n\")\n","\n","# Headers\n","print(\"Ply Strains in Global Axes (Top/Bottom)\")\n","print(\"Ply\\\\tLoc\\\\t\\\\tεx\\\\t\\\\tεy\\\\t\\\\tγxy\")\n","\n","for k in range(n_plies):\n","    theta_k = stacking_sequence[k]\n","    for loc, z_eval in [(\"Top\", z_coords[k+1]), (\"Bot\", z_coords[k])]:\n","        # Strain in laminate coords at z = z_eval\n","        eps_global = epsilon_0 + z_eval * kappa\n","        print(f\"{theta_k:+d}\\t{loc}\\t\\t{eps_global[0,0]:.6e}\\t{eps_global[1,0]:.6e}\\t{eps_global[2,0]:.6e}\")\n","\n","print(\"\\nPly Stresses in Global Axes (Top/Bottom) [psi]\")\n","print(\"Ply\\\\tLoc\\\\t\\\\tσx\\\\t\\\\tσy\\\\t\\\\tτxy\")\n","\n","for k in range(n_plies):\n","    theta_k = stacking_sequence[k]\n","    Q_bar_k = transform_Q(theta_k, Q_mat)\n","    ab_k = alpha_bar(theta_k, alpha1, alpha2).reshape((3,1))\n","\n","    for loc, z_eval in [(\"Top\", z_coords[k+1]), (\"Bot\", z_coords[k])]:\n","        # Strain in laminate coords at z = z_eval\n","        eps_global = epsilon_0 + z_eval * kappa\n","        # Stress = Q_bar_k [eps_global - alpha_bar_k * dT]\n","        sigma_global = Q_bar_k @ (eps_global - ab_k * delta_T)\n","        print(f\"{theta_k:+d}\\t{loc}\\t\\t{sigma_global[0,0]:.2f}\\t{sigma_global[1,0]:.2f}\\t{sigma_global[2,0]:.2f}\")\n","\n","print(\"\\nOptionally, transform these to local (ply) axes if needed:\")"]},{"cell_type":"code","source":["import numpy as np\n","\n","# --------------------------\n","# 1) Material & Laminate Definition\n","# --------------------------\n","# Typical AS4/3501-6 or similar carbon/epoxy properties (example values):\n","E1    = 2.00e7   # psi (fiber direction)\n","E2    = 1.30e6   # psi (transverse direction)\n","G12   = 1.00e6   # psi\n","nu12  = 0.30\n","nu21  = 0.02\n","\n","# 4 plies: [0, +45, +45, 0], each 0.005 in thick => total 0.020 in\n","ply_orientations = [0.0, 45.0, 45.0, 0.0]\n","ply_thickness    = 0.005  # in\n","n_plies          = len(ply_orientations)\n","h_total          = n_plies * ply_thickness  # 0.020 in\n","\n","# We'll measure z from the laminate mid-plane = 0\n","# So top surface = +0.010 in, bottom surface = -0.010 in\n","# Ply boundaries (interfaces):\n","#   Ply 1: z in (+0.005 to +0.010)\n","#   Ply 2: z in ( 0.000 to +0.005)\n","#   Ply 3: z in (-0.005 to 0.000)\n","#   Ply 4: z in (-0.010 to -0.005)\n","z_interfaces = np.linspace(-h_total/2, h_total/2, n_plies+1)\n","# => [-0.01, -0.005, 0.0, 0.005, 0.01]\n","\n","# We'll label from TOP to BOTTOM, so let's flip that array\n","z_interfaces = z_interfaces[::-1]  # [ 0.01, 0.005, 0.0, -0.005, -0.01 ]\n","\n","# For clarity, let's pair them as \"top of Ply i\" and \"bottom of Ply i\"\n","#   Ply1: top= z_interfaces[0], bottom= z_interfaces[1]\n","#   Ply2: top= z_interfaces[1], bottom= z_interfaces[2], etc.\n","\n","# --------------------------\n","# 2) Build the untransformed Q (plane-stress)\n","# --------------------------\n","def get_Q(E1, E2, G12, nu12, nu21):\n","    \"\"\"Base 3x3 stiffness matrix [Q] for an orthotropic ply in plane-stress.\"\"\"\n","    denom = 1.0 - nu12*nu21\n","    Q11 = E1 / denom\n","    Q22 = E2 / denom\n","    Q12 = (nu12 * E2) / denom\n","    Q21 = (nu21 * E1) / denom\n","    Q66 = G12\n","    return np.array([\n","        [Q11, Q12, 0.0],\n","        [Q21, Q22, 0.0],\n","        [0.0, 0.0, Q66]\n","    ])\n","\n","Q_0deg = get_Q(E1, E2, G12, nu12, nu21)\n","\n","def transform_Q(Q, theta_deg):\n","    \"\"\"Return the transformed Q_bar for a ply at angle theta (degrees).\"\"\"\n","    theta = np.radians(theta_deg)\n","    c, s = np.cos(theta), np.sin(theta)\n","    # 2D plane-stress transformation matrix (inverse form)\n","    T_inv = np.array([\n","        [ c**2,   s**2,   2*c*s ],\n","        [ s**2,   c**2,  -2*c*s ],\n","        [-c*s,    c*s,   (c**2 - s**2)]\n","    ])\n","    return T_inv.T @ Q @ T_inv\n","\n","# --------------------------\n","# 3) Integrate A, B, D\n","# --------------------------\n","A = np.zeros((3,3))\n","B = np.zeros((3,3))\n","D = np.zeros((3,3))\n","\n","for i, theta_deg in enumerate(ply_orientations):\n","    Q_bar = transform_Q(Q_0deg, theta_deg)\n","    z_top    = z_interfaces[i]   # note: reversed array => i'th is top\n","    z_bottom = z_interfaces[i+1] # next is bottom\n","    dz = (z_top - z_bottom)      # thickness of this ply\n","\n","    A += Q_bar * dz\n","    B += 0.5 * Q_bar * (z_top**2 - z_bottom**2)\n","    D += (1.0/3.0) * Q_bar * (z_top**3 - z_bottom**3)\n","\n","ABD = np.block([\n","    [A, B],\n","    [B, D]\n","])\n","\n","# --------------------------\n","# 4) Applied Loads: pure bending Mx=5 in-lb/in, no Nx\n","# --------------------------\n","N = np.array([0.0, 0.0, 0.0])   # [Nx, Ny, Nxy] = 0\n","M = np.array([5.0, 0.0, 0.0])   # [Mx, My, Mxy]\n","NM = np.concatenate([N, M])     # shape (6,)\n","\n","# Solve for [eps0, kappa]\n","eps0_kappa = np.linalg.solve(ABD, NM)\n","eps0   = eps0_kappa[0:3]  # [ex0, ey0, gxy0]\n","kappa  = eps0_kappa[3:6]  # [kx, ky, kxy]\n","\n","# --------------------------\n","# 5) Functions for computing strains & stresses at any z\n","# --------------------------\n","def global_strain(eps0, kappa, z):\n","    \"\"\"Global strain [ex, ey, gxy] at through-thickness coordinate z.\"\"\"\n","    return eps0 + z*kappa\n","\n","def to_local_strain(eps_global, theta_deg):\n","    \"\"\"Transform global strain -> local ply coords [e1, e2, g12].\"\"\"\n","    theta = np.radians(theta_deg)\n","    c, s = np.cos(theta), np.sin(theta)\n","    T = np.array([\n","        [ c**2,   s**2,   2*c*s ],\n","        [ s**2,   c**2,  -2*c*s ],\n","        [-c*s,    c*s,   c**2 - s**2]\n","    ])\n","    return T @ eps_global\n","\n","def global_stress(eps_global, Q_bar):\n","    \"\"\"Global stress [sx, sy, txy] = Q_bar * global_strain.\"\"\"\n","    return Q_bar @ eps_global\n","\n","def to_local_stress(stress_global, theta_deg):\n","    \"\"\"\n","    Transform global stress [sx, sy, txy] -> local [s1, s2, t12].\n","    One way is to treat stress like [T]*[sx, sy, txy].\n","    Alternatively, we can do the 'stress transform' matrix.\n","    \"\"\"\n","    # The standard 2D stress transform (x->1, y->2) is similar but note sign differences.\n","    # Let's do a direct approach: s_local = T_sigma * s_global\n","    theta = np.radians(theta_deg)\n","    c, s = np.cos(theta), np.sin(theta)\n","    # For stress, the transformation is:\n","    T_sig = np.array([\n","       [ c**2,  s**2,   2*c*s ],\n","       [ s**2,  c**2,  -2*c*s ],\n","       [-c*s,   c*s,   c**2 - s**2]\n","    ])\n","    return T_sig @ stress_global\n","\n","# --------------------------\n","# 6) Build Table of Results\n","# We'll evaluate top plane, bottom plane, and each ply interface\n","# and label them accordingly.\n","# --------------------------\n","\n","# We'll store rows of data in a list, then print nicely at the end\n","table_rows = []\n","table_header = [\n","    \"z(in)\",\n","    \"ex\", \"ey\", \"gxy\",\n","    \"e1\", \"e2\", \"g12\",\n","    \"sx (psi)\", \"sy (psi)\", \"txy (psi)\",\n","    \"s1 (psi)\", \"s2 (psi)\", \"t12 (psi)\"\n","]\n","\n","# We have 4 plies => 5 interface planes. We'll also include the top plane as 'Plane 0'\n","# and the bottom plane as 'Plane 4' but we label them as top/bottom of each ply.\n","\n","for i in range(n_plies):\n","    # top surface of ply i\n","    #    i=0 => Ply1 top, i=1 => Ply2 top, ...\n","    z_top = z_interfaces[i]\n","    theta_deg = ply_orientations[i]\n","    eps_g_top = global_strain(eps0, kappa, z_top)\n","    Q_bar_top = transform_Q(Q_0deg, theta_deg)\n","    sig_g_top = global_stress(eps_g_top, Q_bar_top)\n","\n","    eps_l_top = to_local_strain(eps_g_top, theta_deg)\n","    sig_l_top = to_local_stress(sig_g_top, theta_deg)\n","\n","    row_top = [\n","        f\"Top Ply {i+1}\",\n","        z_top,\n","        eps_g_top[0], eps_g_top[1], eps_g_top[2],\n","        eps_l_top[0], eps_l_top[1], eps_l_top[2],\n","        sig_g_top[0], sig_g_top[1], sig_g_top[2],\n","        sig_l_top[0], sig_l_top[1], sig_l_top[2]\n","    ]\n","    table_rows.append(row_top)\n","\n","    # bottom surface of ply i\n","    z_bot = z_interfaces[i+1]\n","    # The local angle is the same ply orientation i,\n","    # because physically it's the same ply from top to bottom.\n","    eps_g_bot = global_strain(eps0, kappa, z_bot)\n","    sig_g_bot = global_stress(eps_g_bot, Q_bar_top)\n","\n","    eps_l_bot = to_local_strain(eps_g_bot, theta_deg)\n","    sig_l_bot = to_local_stress(sig_g_bot, theta_deg)\n","\n","    row_bot = [\n","        f\"Bot Ply {i+1}\",\n","        z_bot,\n","        eps_g_bot[0], eps_g_bot[1], eps_g_bot[2],\n","        eps_l_bot[0], eps_l_bot[1], eps_l_bot[2],\n","        sig_g_bot[0], sig_g_bot[1], sig_g_bot[2],\n","        sig_l_bot[0], sig_l_bot[1], sig_l_bot[2]\n","    ]\n","    table_rows.append(row_bot)\n","\n","# --------------------------\n","# 7) Print the table\n","# --------------------------\n","\n","# We'll format the data in columns\n","col_widths = [12, 8, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14]\n","\n","def format_row(row, widths):\n","    formatted = []\n","    for item, w in zip(row, widths):\n","        if isinstance(item, float):\n","            # 5 decimal places\n","            formatted.append(format(item, f\">{w}.5f\"))\n","        else:\n","            # Right-align as a string\n","            formatted.append(format(str(item), f\">{w}\"))\n","    return \" \".join(formatted)\n","\n","\n","print(format_row(table_header, col_widths))\n","for row in table_rows:\n","    print(format_row(row, col_widths))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BB2YhUl8AVFq","executionInfo":{"status":"ok","timestamp":1743412824938,"user_tz":-330,"elapsed":120,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"b106ae6a-73ac-41c6-e4e6-413e8bf84270"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["       z(in)       ex           ey          gxy           e1           e2          g12     sx (psi)       sy (psi)      txy (psi)       s1 (psi)       s2 (psi)      t12 (psi)\n","   Top Ply 1  0.01000      0.00424     -0.00178     -0.00084      0.00424     -0.00178     -0.00084    84669.68567     -614.72971     -839.38488    84669.68567     -614.72971     -839.38488\n","   Bot Ply 1  0.00500      0.00212     -0.00089     -0.00042      0.00212     -0.00089     -0.00042    42334.84283     -307.36485     -419.69244    42334.84283     -307.36485     -419.69244\n","   Top Ply 2  0.00500      0.00212     -0.00089     -0.00042      0.00020      0.00104     -0.00150     3656.10017     2151.55397     2937.84709     5841.67416      -34.02001     -752.27310\n","   Bot Ply 2  0.00000     -0.00000     -0.00000      0.00000      0.00000     -0.00000      0.00000        0.00000        0.00000        0.00000        0.00000       -0.00000        0.00000\n","   Top Ply 3  0.00000     -0.00000     -0.00000      0.00000      0.00000     -0.00000      0.00000        0.00000        0.00000        0.00000        0.00000       -0.00000        0.00000\n","   Bot Ply 3 -0.00500     -0.00212      0.00089      0.00042     -0.00020     -0.00104      0.00150    -3656.10017    -2151.55397    -2937.84709    -5841.67416       34.02001      752.27310\n","   Top Ply 4 -0.00500     -0.00212      0.00089      0.00042     -0.00212      0.00089      0.00042   -42334.84283      307.36485      419.69244   -42334.84283      307.36485      419.69244\n","   Bot Ply 4 -0.01000     -0.00424      0.00178      0.00084     -0.00424      0.00178      0.00084   -84669.68567      614.72971      839.38488   -84669.68567      614.72971      839.38488\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import itertools\n","\n","# ---------------------------------------------------------------------------\n","# Step 1: Define Material Properties and Basic Laminate Parameters\n","# ---------------------------------------------------------------------------\n","# Material properties for a typical carbon/epoxy (e.g., AS4/3501-6)\n","E1    = 2.00e7   # psi, modulus along fibers\n","E2    = 1.30e6   # psi, transverse modulus\n","G12   = 1.00e6   # psi, in-plane shear modulus\n","nu12  = 0.30     # major Poisson's ratio\n","nu21  = 0.02     # minor Poisson's ratio\n","\n","# Ply thickness (in)\n","ply_thickness = 0.005  # in\n","\n","# Define lamina strength properties (psi) for failure criteria:\n","X_strength = 150000.0  # fiber strength (tensile/compressive)\n","Y_strength = 10000.0   # transverse strength\n","S_strength = 8000.0    # shear strength\n","\n","# ---------------------------------------------------------------------------\n","# Step 2: Define Allowed Ply Orientations and Generate Candidate Layups\n","# ---------------------------------------------------------------------------\n","# Allowed ply angles (in degrees)\n","allowed_angles = [0.0, 45.0, -45.0, 90.0]\n","\n","# For symmetric 4-ply laminates, the sequence has the form [A, B, B, A]\n","candidate_layups = []\n","for A in allowed_angles:\n","    for B in allowed_angles:\n","        candidate_layups.append([A, B, B, A])\n","\n","print(\"Candidate layups (symmetric 4-ply):\")\n","for layup in candidate_layups:\n","    print(layup)\n","\n","# ---------------------------------------------------------------------------\n","# Step 3: Functions for Laminate Analysis (from your existing code)\n","# ---------------------------------------------------------------------------\n","def get_Q(E1, E2, G12, nu12, nu21):\n","    \"\"\"Compute the untransformed 3x3 stiffness matrix Q (plane stress).\"\"\"\n","    denom = 1.0 - nu12 * nu21\n","    Q11 = E1 / denom\n","    Q22 = E2 / denom\n","    Q12 = (nu12 * E2) / denom\n","    Q21 = (nu21 * E1) / denom\n","    Q66 = G12\n","    return np.array([[Q11, Q12, 0.0],\n","                     [Q21, Q22, 0.0],\n","                     [0.0, 0.0, Q66]])\n","\n","def transform_Q(Q, theta_deg):\n","    \"\"\"Transform the Q matrix for a ply oriented at theta_deg (degrees).\"\"\"\n","    theta = np.radians(theta_deg)\n","    c, s = np.cos(theta), np.sin(theta)\n","    # Transformation matrix for plane stress (inverse form)\n","    T_inv = np.array([[ c**2,   s**2,   2*c*s],\n","                      [ s**2,   c**2,  -2*c*s],\n","                      [-c*s,    c*s,   (c**2 - s**2)]])\n","    return T_inv.T @ Q @ T_inv\n","\n","def compute_ABD(layup, ply_thickness, E1, E2, G12, nu12, nu21):\n","    \"\"\"\n","    Given a stacking sequence 'layup' (list of ply angles), compute the\n","    laminate A, B, D matrices and return the combined 6x6 ABD matrix along\n","    with the interface coordinates.\n","    \"\"\"\n","    n_plies = len(layup)\n","    h_total = n_plies * ply_thickness\n","    # Generate ply interface coordinates: from bottom (-h/2) to top (h/2), then flip\n","    z_interfaces = np.linspace(-h_total/2, h_total/2, n_plies+1)[::-1]\n","    # z_interfaces now: [top, ..., bottom]\n","\n","    Q_0deg = get_Q(E1, E2, G12, nu12, nu21)\n","    A = np.zeros((3,3))\n","    B = np.zeros((3,3))\n","    D = np.zeros((3,3))\n","\n","    # Integrate through each ply\n","    for i, theta_deg in enumerate(layup):\n","        Q_bar = transform_Q(Q_0deg, theta_deg)\n","        z_top = z_interfaces[i]\n","        z_bottom = z_interfaces[i+1]\n","        dz = z_top - z_bottom  # thickness of the ply\n","        A += Q_bar * dz\n","        B += 0.5 * Q_bar * (z_top**2 - z_bottom**2)\n","        D += (1.0/3.0) * Q_bar * (z_top**3 - z_bottom**3)\n","\n","    ABD = np.block([[A, B], [B, D]])\n","    return ABD, A, B, D, z_interfaces\n","\n","# ---------------------------------------------------------------------------\n","# Step 4: Failure Criterion: Tsai-Hill\n","# ---------------------------------------------------------------------------\n","def tsai_hill_failure_index(sigma1, sigma2, tau12, X, Y, S):\n","    \"\"\"\n","    Compute the Tsai-Hill failure index.\n","    A value > 1 indicates failure.\n","    Using the simplified form:\n","       FI = (sigma1^2)/(X^2) + (sigma2^2)/(Y^2) + (tau12^2)/(S^2)\n","            - (sigma1*sigma2)/(X^2)\n","    \"\"\"\n","    term1 = (sigma1**2) / (X**2)\n","    term2 = (sigma2**2) / (Y**2)\n","    term3 = (tau12**2) / (S**2)\n","    cross_term = -(sigma1 * sigma2) / (X**2)\n","    return term1 + term2 + term3 + cross_term\n","\n","# ---------------------------------------------------------------------------\n","# Step 5: Define Evaluation Function for a Given Layup\n","# ---------------------------------------------------------------------------\n","def evaluate_layup(layup, ply_thickness, E1, E2, G12, nu12, nu21, Mx, allowable_stress):\n","    \"\"\"\n","    For a given stacking sequence 'layup', compute the laminate response under\n","    pure bending (Mx) and determine:\n","      1. The maximum global stress at the top surface.\n","      2. Ply-by-ply global stresses at top and bottom.\n","      3. Tsai-Hill failure indices at each ply (after converting global stresses\n","         to local stresses).\n","    Return a dictionary with these results.\n","    \"\"\"\n","    # For pure bending, no in-plane forces:\n","    N = np.array([0.0, 0.0, 0.0])\n","    M = np.array([Mx, 0.0, 0.0])\n","    NM = np.concatenate([N, M])\n","\n","    ABD, A, B, D, z_interfaces = compute_ABD(layup, ply_thickness, E1, E2, G12, nu12, nu21)\n","    # Solve for mid-plane strains (eps0) and curvatures (kappa)\n","    eps0_kappa = np.linalg.solve(ABD, NM)\n","    eps0 = eps0_kappa[0:3]\n","    kappa = eps0_kappa[3:6]\n","\n","    # Evaluate global strain at the top surface (z = maximum, i.e., z_interfaces[0])\n","    eps_global_top = eps0 + z_interfaces[0] * kappa\n","\n","    # Compute Q_bar for the top ply (assume the top ply has orientation layup[0])\n","    Q_0deg = get_Q(E1, E2, G12, nu12, nu21)\n","    Q_bar_top = transform_Q(Q_0deg, layup[0])\n","\n","    # Compute global stress at the top surface: sigma = Q_bar * strain\n","    stress_global_top = Q_bar_top @ eps_global_top\n","    max_stress = np.max(np.abs(stress_global_top))\n","    meets_design = max_stress <= allowable_stress\n","\n","    # Detailed results for each ply interface and failure indices\n","    detailed_results = []\n","    # We'll use our to_local_stress transformation below:\n","    def to_local_stress(stress_global, theta_deg):\n","        \"\"\"\n","        Transform global stress [sx, sy, txy] -> local [s1, s2, t12].\n","        This uses the same transformation as for strain.\n","        \"\"\"\n","        theta = np.radians(theta_deg)\n","        c, s = np.cos(theta), np.sin(theta)\n","        T_sig = np.array([\n","           [ c**2,  s**2,   2*c*s],\n","           [ s**2,  c**2,  -2*c*s],\n","           [-c*s,   c*s,   (c**2 - s**2)]\n","        ])\n","        return T_sig @ stress_global\n","\n","    for i in range(len(layup)):\n","        z_top_ply = z_interfaces[i]\n","        z_bot_ply = z_interfaces[i+1]\n","        theta_deg = layup[i]\n","\n","        # Global strains at top and bottom of the ply\n","        eps_global_top_ply = eps0 + z_top_ply * kappa\n","        eps_global_bot_ply = eps0 + z_bot_ply * kappa\n","\n","        # Global stresses at top and bottom of the ply\n","        Q_bar = transform_Q(Q_0deg, theta_deg)\n","        stress_global_top_ply = Q_bar @ eps_global_top_ply\n","        stress_global_bot_ply = Q_bar @ eps_global_bot_ply\n","\n","        # Transform global stresses to local stresses for failure evaluation\n","        stress_local_top = to_local_stress(stress_global_top_ply, theta_deg)\n","        stress_local_bot = to_local_stress(stress_global_bot_ply, theta_deg)\n","        # Unpack local stress components: [sigma1, sigma2, tau12]\n","        sigma1_top, sigma2_top, tau12_top = stress_local_top\n","        sigma1_bot, sigma2_bot, tau12_bot = stress_local_bot\n","\n","        # Compute Tsai-Hill failure indices\n","        FI_top = tsai_hill_failure_index(sigma1_top, sigma2_top, tau12_top, X_strength, Y_strength, S_strength)\n","        FI_bot = tsai_hill_failure_index(sigma1_bot, sigma2_bot, tau12_bot, X_strength, Y_strength, S_strength)\n","\n","        # Store detailed results including failure indices\n","        detailed_results.append({\n","            \"ply\": i+1,\n","            \"z_top\": z_top_ply,\n","            \"z_bottom\": z_bot_ply,\n","            \"theta_deg\": theta_deg,\n","            \"eps_global_top\": eps_global_top_ply,\n","            \"eps_global_bottom\": eps_global_bot_ply,\n","            \"stress_global_top\": stress_global_top_ply,\n","            \"stress_global_bottom\": stress_global_bot_ply,\n","            \"stress_local_top\": stress_local_top,\n","            \"stress_local_bottom\": stress_local_bot,\n","            \"FI_top\": FI_top,\n","            \"FI_bottom\": FI_bot\n","        })\n","\n","    return {\n","        \"layup\": layup,\n","        \"max_stress\": max_stress,\n","        \"eps0\": eps0,\n","        \"kappa\": kappa,\n","        \"meets_design\": meets_design,\n","        \"detailed_results\": detailed_results\n","    }\n","\n","# ---------------------------------------------------------------------------\n","# Step 6: Evaluate Candidate Layups Against a Design Criterion\n","# ---------------------------------------------------------------------------\n","# Define an allowable maximum stress (for example, 100,000 psi)\n","allowable_stress = 100000.0  # psi\n","Mx = 5.0  # in-lb/in (applied bending moment)\n","\n","feasible_layups = []\n","for layup in candidate_layups:\n","    result = evaluate_layup(layup, ply_thickness, E1, E2, G12, nu12, nu21, Mx, allowable_stress)\n","    if result[\"meets_design\"]:\n","        feasible_layups.append(result)\n","\n","print(\"\\nFeasible Layups Meeting the Design Criteria:\")\n","for res in feasible_layups:\n","    print(\"Layup:\", res[\"layup\"], \"-> Max Stress: {:.2f} psi\".format(res[\"max_stress\"]))\n","\n","# Print detailed results for each feasible layup, including Tsai-Hill indices\n","for res in feasible_layups:\n","    print(\"\\nLayup:\", res[\"layup\"], \"-> Max Stress: {:.2f} psi\".format(res[\"max_stress\"]))\n","    print(\"Mid-plane strains (eps0):\", res[\"eps0\"])\n","    print(\"Curvatures (kappa):\", res[\"kappa\"])\n","    print(\"Detailed Ply Results:\")\n","    for ply_result in res[\"detailed_results\"]:\n","        print(f\"Ply {ply_result['ply']} (θ = {ply_result['theta_deg']}°):\")\n","        print(f\"  z_top = {ply_result['z_top']:.4f} in, z_bottom = {ply_result['z_bottom']:.4f} in\")\n","        #print(\"  Global strains (top):\", ply_result[\"eps_global_top\"])\n","        #print(\"  Global strains (bottom):\", ply_result[\"eps_global_bottom\"])\n","        #print(\"  Global stresses (top):\", ply_result[\"stress_global_top\"])\n","        #print(\"  Global stresses (bottom):\", ply_result[\"stress_global_bottom\"])\n","        print(\"  Local stresses (top):\", ply_result[\"stress_local_top\"])\n","        print(\"  Local stresses (bottom):\", ply_result[\"stress_local_bottom\"])\n","        print(\"  Tsai-Hill FI (top): {:.2f}\".format(ply_result[\"FI_top\"]))\n","        print(\"  Tsai-Hill FI (bottom): {:.2f}\".format(ply_result[\"FI_bottom\"]))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HS5D9qfoR7FC","executionInfo":{"status":"ok","timestamp":1743412829967,"user_tz":-330,"elapsed":263,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"464e8b3e-0101-4026-d138-1f4defefa1c7"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Candidate layups (symmetric 4-ply):\n","[0.0, 0.0, 0.0, 0.0]\n","[0.0, 45.0, 45.0, 0.0]\n","[0.0, -45.0, -45.0, 0.0]\n","[0.0, 90.0, 90.0, 0.0]\n","[45.0, 0.0, 0.0, 45.0]\n","[45.0, 45.0, 45.0, 45.0]\n","[45.0, -45.0, -45.0, 45.0]\n","[45.0, 90.0, 90.0, 45.0]\n","[-45.0, 0.0, 0.0, -45.0]\n","[-45.0, 45.0, 45.0, -45.0]\n","[-45.0, -45.0, -45.0, -45.0]\n","[-45.0, 90.0, 90.0, -45.0]\n","[90.0, 0.0, 0.0, 90.0]\n","[90.0, 45.0, 45.0, 90.0]\n","[90.0, -45.0, -45.0, 90.0]\n","[90.0, 90.0, 90.0, 90.0]\n","\n","Feasible Layups Meeting the Design Criteria:\n","Layup: [0.0, 0.0, 0.0, 0.0] -> Max Stress: 75000.00 psi\n","Layup: [0.0, 45.0, 45.0, 0.0] -> Max Stress: 84669.69 psi\n","Layup: [0.0, -45.0, -45.0, 0.0] -> Max Stress: 84669.69 psi\n","Layup: [0.0, 90.0, 90.0, 0.0] -> Max Stress: 84950.43 psi\n","Layup: [45.0, 0.0, 0.0, 45.0] -> Max Stress: 20284.79 psi\n","Layup: [45.0, 45.0, 45.0, 45.0] -> Max Stress: 75000.00 psi\n","Layup: [45.0, -45.0, -45.0, 45.0] -> Max Stress: 65409.17 psi\n","Layup: [45.0, 90.0, 90.0, 45.0] -> Max Stress: 75576.30 psi\n","Layup: [-45.0, 0.0, 0.0, -45.0] -> Max Stress: 20284.79 psi\n","Layup: [-45.0, 45.0, 45.0, -45.0] -> Max Stress: 65409.17 psi\n","Layup: [-45.0, -45.0, -45.0, -45.0] -> Max Stress: 75000.00 psi\n","Layup: [-45.0, 90.0, 90.0, -45.0] -> Max Stress: 75576.30 psi\n","Layup: [90.0, 0.0, 0.0, 90.0] -> Max Stress: 26686.23 psi\n","Layup: [90.0, 45.0, 45.0, 90.0] -> Max Stress: 66986.98 psi\n","Layup: [90.0, -45.0, -45.0, 90.0] -> Max Stress: 66986.98 psi\n","Layup: [90.0, 90.0, 90.0, 90.0] -> Max Stress: 75000.00 psi\n","\n","Layup: [0.0, 0.0, 0.0, 0.0] -> Max Stress: 75000.00 psi\n","Mid-plane strains (eps0): [ 1.06081810e-19 -7.17374877e-21  0.00000000e+00]\n","Curvatures (kappa): [ 0.375      -0.11538462  0.        ]\n","Detailed Ply Results:\n","Ply 1 (θ = 0.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [ 7.50000000e+04 -4.57739368e-13  0.00000000e+00]\n","  Local stresses (bottom): [ 3.75000000e+04 -2.02442579e-13  0.00000000e+00]\n","  Tsai-Hill FI (top): 0.25\n","  Tsai-Hill FI (bottom): 0.06\n","Ply 2 (θ = 0.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [ 3.75000000e+04 -2.02442579e-13  0.00000000e+00]\n","  Local stresses (bottom): [2.13162821e-12 3.33066907e-14 0.00000000e+00]\n","  Tsai-Hill FI (top): 0.06\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 0.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [2.13162821e-12 3.33066907e-14 0.00000000e+00]\n","  Local stresses (bottom): [-3.75000000e+04  2.28869684e-13  0.00000000e+00]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 0.06\n","Ply 4 (θ = 0.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-3.75000000e+04  2.28869684e-13  0.00000000e+00]\n","  Local stresses (bottom): [-7.50000000e+04  4.57739368e-13  0.00000000e+00]\n","  Tsai-Hill FI (top): 0.06\n","  Tsai-Hill FI (bottom): 0.25\n","\n","Layup: [0.0, 45.0, 45.0, 0.0] -> Max Stress: 84669.69 psi\n","Mid-plane strains (eps0): [-4.38308275e-20 -1.81678187e-20  5.35079806e-20]\n","Curvatures (kappa): [ 0.42427052 -0.17754796 -0.08393849]\n","Detailed Ply Results:\n","Ply 1 (θ = 0.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [84669.68566556  -614.72970708  -839.38488169]\n","  Local stresses (bottom): [42334.84283278  -307.36485354  -419.69244085]\n","  Tsai-Hill FI (top): 0.34\n","  Tsai-Hill FI (bottom): 0.08\n","Ply 2 (θ = 45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [5841.6741586   -34.02001326 -752.27309788]\n","  Local stresses (bottom): [ 6.80332965e-13 -3.62064083e-13  6.41575219e-15]\n","  Tsai-Hill FI (top): 0.01\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 6.80332965e-13 -3.62064083e-13  6.41575219e-15]\n","  Local stresses (bottom): [-5841.6741586     34.02001326   752.27309788]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 0.01\n","Ply 4 (θ = 0.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-42334.84283278    307.36485354    419.69244085]\n","  Local stresses (bottom): [-84669.68566556    614.72970708    839.38488169]\n","  Tsai-Hill FI (top): 0.08\n","  Tsai-Hill FI (bottom): 0.34\n","\n","Layup: [0.0, -45.0, -45.0, 0.0] -> Max Stress: 84669.69 psi\n","Mid-plane strains (eps0): [-4.38308275e-20 -1.81678187e-20 -5.35079806e-20]\n","Curvatures (kappa): [ 0.42427052 -0.17754796  0.08393849]\n","Detailed Ply Results:\n","Ply 1 (θ = 0.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [84669.68566556  -614.72970708   839.38488169]\n","  Local stresses (bottom): [42334.84283278  -307.36485354   419.69244085]\n","  Tsai-Hill FI (top): 0.34\n","  Tsai-Hill FI (bottom): 0.08\n","Ply 2 (θ = -45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [5841.6741586   -34.02001326  752.27309788]\n","  Local stresses (bottom): [ 6.80332965e-13 -3.62064083e-13 -6.41575219e-15]\n","  Tsai-Hill FI (top): 0.01\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = -45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 6.80332965e-13 -3.62064083e-13 -6.41575219e-15]\n","  Local stresses (bottom): [-5841.6741586     34.02001326  -752.27309788]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 0.01\n","Ply 4 (θ = 0.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-42334.84283278    307.36485354   -419.69244085]\n","  Local stresses (bottom): [-84669.68566556    614.72970708   -839.38488169]\n","  Tsai-Hill FI (top): 0.08\n","  Tsai-Hill FI (bottom): 0.34\n","\n","Layup: [0.0, 90.0, 90.0, 0.0] -> Max Stress: 84950.43 psi\n","Mid-plane strains (eps0): [ 6.12298604e-22 -1.65088105e-20 -1.02826391e-35]\n","Curvatures (kappa): [ 4.23108107e-01 -4.63819540e-02  1.63365005e-17]\n","Detailed Ply Results:\n","Ply 1 (θ = 0.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [8.49504344e+04 1.09604329e+03 1.63365005e-13]\n","  Local stresses (bottom): [4.24752172e+04 5.48021643e+02 8.16825027e-14]\n","  Tsai-Hill FI (top): 0.33\n","  Tsai-Hill FI (bottom): 0.08\n","Ply 2 (θ = 90.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [-3.83615150e+03  2.67347967e+03  1.73177571e-13]\n","  Local stresses (bottom): [-3.31928987e-13 -5.84259155e-15  2.92013066e-29]\n","  Tsai-Hill FI (top): 0.07\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 90.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [-3.31928987e-13 -5.84259155e-15  2.92013066e-29]\n","  Local stresses (bottom): [ 3.83615150e+03 -2.67347967e+03 -1.73177571e-13]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 0.07\n","Ply 4 (θ = 0.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-4.24752172e+04 -5.48021643e+02 -8.16825027e-14]\n","  Local stresses (bottom): [-8.49504344e+04 -1.09604329e+03 -1.63365005e-13]\n","  Tsai-Hill FI (top): 0.08\n","  Tsai-Hill FI (bottom): 0.33\n","\n","Layup: [45.0, 0.0, 0.0, 45.0] -> Max Stress: 20284.79 psi\n","Mid-plane strains (eps0): [ 1.35506326e-18 -2.10541967e-18  3.26082620e-19]\n","Curvatures (kappa): [ 2.30492513 -1.46836018 -0.37854443]\n","Detailed Ply Results:\n","Ply 1 (θ = 45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [11392.35575951 10310.80025062 -9433.21327921]\n","  Local stresses (bottom): [ 5696.17787975  5155.40012531 -4716.60663961]\n","  Tsai-Hill FI (top): 2.45\n","  Tsai-Hill FI (bottom): 0.61\n","Ply 2 (θ = 0.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [229003.23050502  -4964.27654049  -1892.72214055]\n","  Local stresses (bottom): [ 2.64387843e-11 -2.20826989e-12  3.26082620e-13]\n","  Tsai-Hill FI (top): 2.68\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 0.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 2.64387843e-11 -2.20826989e-12  3.26082620e-13]\n","  Local stresses (bottom): [-229003.23050502    4964.27654049    1892.72214055]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 2.68\n","Ply 4 (θ = 45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-5696.17787975 -5155.40012531  4716.60663961]\n","  Local stresses (bottom): [-11392.35575951 -10310.80025062   9433.21327921]\n","  Tsai-Hill FI (top): 0.61\n","  Tsai-Hill FI (bottom): 2.45\n","\n","Layup: [45.0, 45.0, 45.0, 45.0] -> Max Stress: 75000.00 psi\n","Mid-plane strains (eps0): [-9.93453042e-18  7.17793487e-18  2.12149046e-18]\n","Curvatures (kappa): [ 8.97908654 -6.02091346 -1.34783654]\n","Detailed Ply Results:\n","Ply 1 (θ = 45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [ 37500.  37500. -37500.]\n","  Local stresses (bottom): [ 18750.  18750. -18750.]\n","  Tsai-Hill FI (top): 36.04\n","  Tsai-Hill FI (bottom): 9.01\n","Ply 2 (θ = 45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [ 18750.  18750. -18750.]\n","  Local stresses (bottom): [ 2.25096864e-11 -1.32073839e-11  4.27811632e-12]\n","  Tsai-Hill FI (top): 9.01\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 2.25096864e-11 -1.32073839e-11  4.27811632e-12]\n","  Local stresses (bottom): [-18750. -18750.  18750.]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 9.01\n","Ply 4 (θ = 45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-18750. -18750.  18750.]\n","  Local stresses (bottom): [-37500. -37500.  37500.]\n","  Tsai-Hill FI (top): 9.01\n","  Tsai-Hill FI (bottom): 36.04\n","\n","Layup: [45.0, -45.0, -45.0, 45.0] -> Max Stress: 65409.17 psi\n","Mid-plane strains (eps0): [-9.11230274e-18  1.05088446e-17 -1.22752392e-18]\n","Curvatures (kappa): [ 8.09642249 -6.90357751 -0.40762322]\n","Detailed Ply Results:\n","Ply 1 (θ = 45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [ 55945.22421409   -126.89045099 -37500.        ]\n","  Local stresses (bottom): [ 27972.61210704    -63.44522549 -18750.        ]\n","  Tsai-Hill FI (top): 22.11\n","  Tsai-Hill FI (bottom): 5.53\n","Ply 2 (θ = -45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [150444.11657846 -45808.28474931  18750.        ]\n","  Local stresses (bottom): [ 5.77697069e-11 -1.91461879e-11 -4.90528685e-12]\n","  Tsai-Hill FI (top): 27.79\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = -45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 5.77697069e-11 -1.91461879e-11 -4.90528685e-12]\n","  Local stresses (bottom): [-150444.11657846   45808.28474931  -18750.        ]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 27.79\n","Ply 4 (θ = 45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-27972.61210704     63.44522549  18750.        ]\n","  Local stresses (bottom): [-55945.22421409    126.89045099  37500.        ]\n","  Tsai-Hill FI (top): 5.53\n","  Tsai-Hill FI (bottom): 22.11\n","\n","Layup: [45.0, 90.0, 90.0, 45.0] -> Max Stress: 75576.30 psi\n","Mid-plane strains (eps0): [ 5.31720475e-19 -9.93498381e-19  2.00674969e-19]\n","Curvatures (kappa): [ 5.87737654 -1.46644978 -1.99593795]\n","Detailed Ply Results:\n","Ply 1 (θ = 45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [ 60068.07538965  54365.39552105 -18359.56579042]\n","  Local stresses (bottom): [30034.03769483 27182.69776052 -9179.78289521]\n","  Tsai-Hill FI (top): 34.84\n","  Tsai-Hill FI (bottom): 8.71\n","Ply 2 (θ = 90.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [-136000.09382726   35482.9456398     9979.68977006]\n","  Local stresses (bottom): [-1.97812843e-11  2.95610931e-13 -2.00674969e-13]\n","  Tsai-Hill FI (top): 15.18\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 90.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [-1.97812843e-11  2.95610931e-13 -2.00674969e-13]\n","  Local stresses (bottom): [136000.09382726 -35482.9456398   -9979.68977006]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 15.18\n","Ply 4 (θ = 45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-30034.03769483 -27182.69776052   9179.78289521]\n","  Local stresses (bottom): [-60068.07538965 -54365.39552105  18359.56579042]\n","  Tsai-Hill FI (top): 8.71\n","  Tsai-Hill FI (bottom): 34.84\n","\n","Layup: [-45.0, 0.0, 0.0, -45.0] -> Max Stress: 20284.79 psi\n","Mid-plane strains (eps0): [ 1.35506326e-18 -2.10541967e-18 -3.26082620e-19]\n","Curvatures (kappa): [ 2.30492513 -1.46836018  0.37854443]\n","Detailed Ply Results:\n","Ply 1 (θ = -45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [11392.35575951 10310.80025062  9433.21327921]\n","  Local stresses (bottom): [5696.17787975 5155.40012531 4716.60663961]\n","  Tsai-Hill FI (top): 2.45\n","  Tsai-Hill FI (bottom): 0.61\n","Ply 2 (θ = 0.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [229003.23050502  -4964.27654049   1892.72214055]\n","  Local stresses (bottom): [ 2.64387843e-11 -2.20826989e-12 -3.26082620e-13]\n","  Tsai-Hill FI (top): 2.68\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 0.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 2.64387843e-11 -2.20826989e-12 -3.26082620e-13]\n","  Local stresses (bottom): [-229003.23050502    4964.27654049   -1892.72214055]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 2.68\n","Ply 4 (θ = -45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-5696.17787975 -5155.40012531 -4716.60663961]\n","  Local stresses (bottom): [-11392.35575951 -10310.80025062  -9433.21327921]\n","  Tsai-Hill FI (top): 0.61\n","  Tsai-Hill FI (bottom): 2.45\n","\n","Layup: [-45.0, 45.0, 45.0, -45.0] -> Max Stress: 65409.17 psi\n","Mid-plane strains (eps0): [-9.11230274e-18  1.05088446e-17  1.22752392e-18]\n","Curvatures (kappa): [ 8.09642249 -6.90357751  0.40762322]\n","Detailed Ply Results:\n","Ply 1 (θ = -45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [55945.22421409  -126.89045099 37500.        ]\n","  Local stresses (bottom): [27972.61210704   -63.44522549 18750.        ]\n","  Tsai-Hill FI (top): 22.11\n","  Tsai-Hill FI (bottom): 5.53\n","Ply 2 (θ = 45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [150444.11657846 -45808.28474931 -18750.        ]\n","  Local stresses (bottom): [ 5.77697069e-11 -1.91461879e-11  4.90528685e-12]\n","  Tsai-Hill FI (top): 27.79\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 5.77697069e-11 -1.91461879e-11  4.90528685e-12]\n","  Local stresses (bottom): [-150444.11657846   45808.28474931   18750.        ]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 27.79\n","Ply 4 (θ = -45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-27972.61210704     63.44522549 -18750.        ]\n","  Local stresses (bottom): [-55945.22421409    126.89045099 -37500.        ]\n","  Tsai-Hill FI (top): 5.53\n","  Tsai-Hill FI (bottom): 22.11\n","\n","Layup: [-45.0, -45.0, -45.0, -45.0] -> Max Stress: 75000.00 psi\n","Mid-plane strains (eps0): [-9.93453042e-18  7.17793487e-18 -2.12149046e-18]\n","Curvatures (kappa): [ 8.97908654 -6.02091346  1.34783654]\n","Detailed Ply Results:\n","Ply 1 (θ = -45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [37500. 37500. 37500.]\n","  Local stresses (bottom): [18750. 18750. 18750.]\n","  Tsai-Hill FI (top): 36.04\n","  Tsai-Hill FI (bottom): 9.01\n","Ply 2 (θ = -45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [18750. 18750. 18750.]\n","  Local stresses (bottom): [ 2.25096864e-11 -1.32073839e-11 -4.27811632e-12]\n","  Tsai-Hill FI (top): 9.01\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = -45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 2.25096864e-11 -1.32073839e-11 -4.27811632e-12]\n","  Local stresses (bottom): [-18750. -18750. -18750.]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 9.01\n","Ply 4 (θ = -45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-18750. -18750. -18750.]\n","  Local stresses (bottom): [-37500. -37500. -37500.]\n","  Tsai-Hill FI (top): 9.01\n","  Tsai-Hill FI (bottom): 36.04\n","\n","Layup: [-45.0, 90.0, 90.0, -45.0] -> Max Stress: 75576.30 psi\n","Mid-plane strains (eps0): [ 5.31720475e-19 -9.93498381e-19 -2.00674969e-19]\n","Curvatures (kappa): [ 5.87737654 -1.46644978  1.99593795]\n","Detailed Ply Results:\n","Ply 1 (θ = -45.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [60068.07538965 54365.39552105 18359.56579042]\n","  Local stresses (bottom): [30034.03769483 27182.69776052  9179.78289521]\n","  Tsai-Hill FI (top): 34.84\n","  Tsai-Hill FI (bottom): 8.71\n","Ply 2 (θ = 90.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [-136000.09382726   35482.9456398    -9979.68977006]\n","  Local stresses (bottom): [-1.97812843e-11  2.95610931e-13  2.00674969e-13]\n","  Tsai-Hill FI (top): 15.18\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 90.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [-1.97812843e-11  2.95610931e-13  2.00674969e-13]\n","  Local stresses (bottom): [136000.09382726 -35482.9456398    9979.68977006]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 15.18\n","Ply 4 (θ = -45.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-30034.03769483 -27182.69776052  -9179.78289521]\n","  Local stresses (bottom): [-60068.07538965 -54365.39552105 -18359.56579042]\n","  Tsai-Hill FI (top): 8.71\n","  Tsai-Hill FI (bottom): 34.84\n","\n","Layup: [90.0, 0.0, 0.0, 90.0] -> Max Stress: 26686.23 psi\n","Mid-plane strains (eps0): [ 8.86448773e-19 -3.28776775e-20  1.27035923e-34]\n","Curvatures (kappa): [ 2.05447339e+00 -4.55095661e-02  1.85191903e-16]\n","Detailed Ply Results:\n","Ply 1 (θ = 90.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [-1.09604329e+03  2.66862331e+04 -1.43661393e-12]\n","  Local stresses (bottom): [-5.48021643e+02  1.33431166e+04 -7.18306967e-13]\n","  Tsai-Hill FI (top): 7.12\n","  Tsai-Hill FI (bottom): 1.78\n","Ply 2 (θ = 0.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [2.06598184e+05 3.83615150e+03 9.25959515e-13]\n","  Local stresses (bottom): [1.78230917e-11 3.13720853e-13 1.27035923e-28]\n","  Tsai-Hill FI (top): 2.01\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 0.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [1.78230917e-11 3.13720853e-13 1.27035923e-28]\n","  Local stresses (bottom): [-2.06598184e+05 -3.83615150e+03 -9.25959515e-13]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 2.01\n","Ply 4 (θ = 90.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [ 5.48021643e+02 -1.33431166e+04  7.18306967e-13]\n","  Local stresses (bottom): [ 1.09604329e+03 -2.66862331e+04  1.43661393e-12]\n","  Tsai-Hill FI (top): 1.78\n","  Tsai-Hill FI (bottom): 7.12\n","\n","Layup: [90.0, 45.0, 45.0, 90.0] -> Max Stress: 66986.98 psi\n","Mid-plane strains (eps0): [-1.70766297e-19 -2.51200627e-19  6.73746663e-19]\n","Curvatures (kappa): [ 5.1757762  -0.17500704 -1.70133201]\n","Detailed Ply Results:\n","Ply 1 (θ = 90.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [-14905.31336077  66986.98432313  17013.32014072]\n","  Local stresses (bottom): [-7452.65668038 33493.49216156  8506.66007036]\n","  Tsai-Hill FI (top): 49.45\n","  Tsai-Hill FI (bottom): 12.36\n","Ply 2 (θ = 45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [118403.69630838   -689.54467665  -6688.47905318]\n","  Local stresses (bottom): [ 1.39314395e-11 -5.93830530e-12 -2.01085826e-14]\n","  Tsai-Hill FI (top): 1.33\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 1.39314395e-11 -5.93830530e-12 -2.01085826e-14]\n","  Local stresses (bottom): [-118403.69630838     689.54467665    6688.47905318]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 1.33\n","Ply 4 (θ = 90.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [  7452.65668038 -33493.49216156  -8506.66007036]\n","  Local stresses (bottom): [ 14905.31336077 -66986.98432313 -17013.32014072]\n","  Tsai-Hill FI (top): 12.36\n","  Tsai-Hill FI (bottom): 49.45\n","\n","Layup: [90.0, -45.0, -45.0, 90.0] -> Max Stress: 66986.98 psi\n","Mid-plane strains (eps0): [-7.03725299e-19 -2.06020464e-19 -9.81865709e-19]\n","Curvatures (kappa): [ 5.1757762  -0.17500704  1.70133201]\n","Detailed Ply Results:\n","Ply 1 (θ = 90.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [-14905.31336077  66986.98432313 -17013.32014072]\n","  Local stresses (bottom): [-7452.65668038 33493.49216156 -8506.66007036]\n","  Tsai-Hill FI (top): 49.45\n","  Tsai-Hill FI (bottom): 12.36\n","Ply 2 (θ = -45.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [118403.69630838   -689.54467665   6688.47905318]\n","  Local stresses (bottom): [ 1.58931331e-11 -7.52033079e-12 -1.24426209e-13]\n","  Tsai-Hill FI (top): 1.33\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = -45.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [ 1.58931331e-11 -7.52033079e-12 -1.24426209e-13]\n","  Local stresses (bottom): [-118403.69630838     689.54467665   -6688.47905318]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 1.33\n","Ply 4 (θ = 90.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [  7452.65668038 -33493.49216156   8506.66007036]\n","  Local stresses (bottom): [ 14905.31336077 -66986.98432313  17013.32014072]\n","  Tsai-Hill FI (top): 12.36\n","  Tsai-Hill FI (bottom): 49.45\n","\n","Layup: [90.0, 90.0, 90.0, 90.0] -> Max Stress: 75000.00 psi\n","Mid-plane strains (eps0): [ 2.15212463e-21 -3.18245430e-20  8.85948293e-35]\n","Curvatures (kappa): [ 5.76923077e+00 -1.12500000e-01  5.58332961e-16]\n","Detailed Ply Results:\n","Ply 1 (θ = 90.0°):\n","  z_top = 0.0100 in, z_bottom = 0.0050 in\n","  Local stresses (top): [ 2.2479569e-12  7.5000000e+04 -4.5924255e-12]\n","  Local stresses (bottom): [ 1.58171603e-12  3.75000000e+04 -2.29621275e-12]\n","  Tsai-Hill FI (top): 56.25\n","  Tsai-Hill FI (bottom): 14.06\n","Ply 2 (θ = 90.0°):\n","  z_top = 0.0050 in, z_bottom = 0.0000 in\n","  Local stresses (top): [ 1.58171603e-12  3.75000000e+04 -2.29621275e-12]\n","  Local stresses (bottom): [-6.39488462e-13 -9.99200722e-15 -5.21297592e-29]\n","  Tsai-Hill FI (top): 14.06\n","  Tsai-Hill FI (bottom): 0.00\n","Ply 3 (θ = 90.0°):\n","  z_top = 0.0000 in, z_bottom = -0.0050 in\n","  Local stresses (top): [-6.39488462e-13 -9.99200722e-15 -5.21297592e-29]\n","  Local stresses (bottom): [-1.12397845e-12 -3.75000000e+04  2.29621275e-12]\n","  Tsai-Hill FI (top): 0.00\n","  Tsai-Hill FI (bottom): 14.06\n","Ply 4 (θ = 90.0°):\n","  z_top = -0.0050 in, z_bottom = -0.0100 in\n","  Local stresses (top): [-1.12397845e-12 -3.75000000e+04  2.29621275e-12]\n","  Local stresses (bottom): [-2.2479569e-12 -7.5000000e+04  4.5924255e-12]\n","  Tsai-Hill FI (top): 14.06\n","  Tsai-Hill FI (bottom): 56.25\n"]}]},{"cell_type":"code","source":["  import numpy as np\n","\n","  # ---------------------------\n","  # Example Failure Functions\n","  # ---------------------------\n","  def tsai_hill_failure_index(sigma1, sigma2, tau12, X, Y, S):\n","      \"\"\"\n","      Simplified Tsai-Hill criterion:\n","        FI = (sigma1^2)/(X^2) + (sigma2^2)/(Y^2) + (tau12^2)/(S^2)\n","            - (sigma1*sigma2)/(X^2)\n","      A value > 1 indicates failure.\n","      \"\"\"\n","      term1 = (sigma1**2) / (X**2)\n","      term2 = (sigma2**2) / (Y**2)\n","      term3 = (tau12**2) / (S**2)\n","      cross_term = -(sigma1 * sigma2) / (X**2)\n","      return term1 + term2 + term3 + cross_term\n","\n","  def tsai_wu_failure_index(sigma1, sigma2, tau12, F1, F2, F11, F22, F12, F66):\n","      \"\"\"\n","      Tsai-Wu criterion in its general polynomial form:\n","        F1*sigma1 + F2*sigma2 + F11*sigma1^2 + F22*sigma2^2 + 2*F12*sigma1*sigma2 + F66*tau12^2 <= 1\n","      Return the left-hand side value (failure if > 1).\n","      \"\"\"\n","      return F1*sigma1 + F2*sigma2 + F11*sigma1**2 + F22*sigma2**2 + 2*F12*sigma1*sigma2 + F66*tau12**2\n","\n","  def hashin_failure_index(sigma1, sigma2, tau12, Xt, Xc, Yt, Yc, S):\n","      \"\"\"\n","      A simplified version of Hashin's criterion.\n","      This function distinguishes between fiber and matrix failure modes.\n","      For demonstration, we'll check fiber tension as an example:\n","        If sigma1 >= 0 (tension): (sigma1/Xt)^2 + (tau12/S)^2 <= 1\n","        If sigma1 < 0 (compression): sigma1/Xc <= 1  (a simplified check)\n","      More complete versions would include matrix failure.\n","      \"\"\"\n","      if sigma1 >= 0:\n","          return (sigma1/Xt)**2 + (tau12/S)**2\n","      else:\n","          # For compression, a simple check (this is very simplified)\n","          return sigma1/Xc\n","\n","  # ---------------------------\n","  # Step: Failure Criterion Selector\n","  # ---------------------------\n","  def choose_failure_criterion(criteria, material_data):\n","      \"\"\"\n","      Selects and returns the appropriate failure criterion function and its required parameters\n","      based on the following inputs:\n","        criteria: a string, e.g., 'tsai_hill', 'tsai_wu', or 'hashin'\n","        material_data: a dictionary containing the required strength values.\n","      \"\"\"\n","      if criteria.lower() == 'tsai_hill':\n","          # For Tsai-Hill we need X, Y, S (assumed symmetric in tension/compression)\n","          X = material_data.get('X_strength')\n","          Y = material_data.get('Y_strength')\n","          S = material_data.get('S_strength')\n","          def criterion(s1, s2, t12):\n","              return tsai_hill_failure_index(s1, s2, t12, X, Y, S)\n","          return criterion\n","      elif criteria.lower() == 'tsai_wu':\n","          # For Tsai-Wu, we assume material_data has F1, F2, F11, F22, F12, F66.\n","          F1 = material_data.get('F1')\n","          F2 = material_data.get('F2')\n","          F11 = material_data.get('F11')\n","          F22 = material_data.get('F22')\n","          F12 = material_data.get('F12')\n","          F66 = material_data.get('F66')\n","          def criterion(s1, s2, t12):\n","              return tsai_wu_failure_index(s1, s2, t12, F1, F2, F11, F22, F12, F66)\n","          return criterion\n","      elif criteria.lower() == 'hashin':\n","          # For Hashin, assume we have Xt, Xc, Yt, Yc, S.\n","          Xt = material_data.get('Xt')\n","          Xc = material_data.get('Xc')\n","          Yt = material_data.get('Yt')\n","          Yc = material_data.get('Yc')\n","          S  = material_data.get('S_strength')\n","          def criterion(s1, s2, t12):\n","              return hashin_failure_index(s1, s2, t12, Xt, Xc, Yt, Yc, S)\n","          return criterion\n","      else:\n","          raise ValueError(\"Unknown failure criterion specified.\")\n","\n","  # ---------------------------\n","  # Step: Example of Using the Selector in the CLT Code\n","  # ---------------------------\n","  # Assume we have already computed local stresses for a given ply (e.g., from your CLT code)\n","  # For demonstration, let’s use example stress values in the ply's local coordinate system:\n","  sigma1_example = 12000.0  # psi\n","  sigma2_example = 3000.0   # psi\n","  tau12_example  = 800.0    # psi\n","\n","  # Material strength data for Tsai-Hill (example)\n","  material_data_tsai_hill = {\n","      'X_strength': 150000.0,\n","      'Y_strength': 10000.0,\n","      'S_strength': 8000.0\n","  }\n","\n","  # Choose the failure criterion (change the string as needed: 'tsai_hill', 'tsai_wu', 'hashin')\n","  failure_function = choose_failure_criterion('tsai_hill', material_data_tsai_hill)\n","\n","  # Compute the failure index for the example ply stress state:\n","  FI = failure_function(sigma1_example, sigma2_example, tau12_example)\n","  print(\"Failure Index (Tsai-Hill):\", FI)\n","\n","  # Interpretation:\n","  if FI > 1:\n","      print(\"Ply predicted to fail (FI > 1).\")\n","  else:\n","      print(\"Ply predicted safe (FI <= 1).\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EYcpoexg6dlB","executionInfo":{"status":"ok","timestamp":1743412836547,"user_tz":-330,"elapsed":17,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"1ee7ff1e-90cc-4f0a-c211-266895e2fb42"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Failure Index (Tsai-Hill): 0.10479999999999999\n","Ply predicted safe (FI <= 1).\n"]}]},{"cell_type":"code","source":["def factor_of_safety(failure_index):\n","    \"\"\"\n","    Compute the Factor of Safety (FoS) from the Failure Index (FI).\n","    \"\"\"\n","    if failure_index <= 0:\n","        raise ValueError(\"Failure Index must be positive.\")\n","    return 1.0 / failure_index\n","\n","# Example usage\n","FI = failure_function(sigma1_example, sigma2_example, tau12_example)\n","FoS = factor_of_safety(FI)\n","print(\"Failure Index (Tsai-Hill):\", FI)\n","print(\"Factor of Safety (FoS):\", FoS)\n","\n","# Interpretation\n","if FoS > 1:\n","    print(\"Ply predicted safe (FoS > 1).\")\n","else:\n","    print(\"Ply predicted to fail (FoS ≤ 1).\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hO0I3Z3R_AJ7","executionInfo":{"status":"ok","timestamp":1743412844767,"user_tz":-330,"elapsed":10,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"09626d5e-2f54-4f29-c37f-59349009271e"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Failure Index (Tsai-Hill): 0.10479999999999999\n","Factor of Safety (FoS): 9.541984732824428\n","Ply predicted safe (FoS > 1).\n"]}]},{"cell_type":"code","source":["\n","import numpy as np\n","import itertools\n","\n","# -----------------------------------------------\n","# Functions from your CLT code (definitions)\n","# -----------------------------------------------\n","def get_Q(E1, E2, G12, nu12, nu21):\n","    denom = 1.0 - nu12 * nu21\n","    Q11 = E1 / denom\n","    Q22 = E2 / denom\n","    Q12 = (nu12 * E2) / denom\n","    Q21 = (nu21 * E1) / denom\n","    Q66 = G12\n","    return np.array([[Q11, Q12, 0.0],\n","                     [Q21, Q22, 0.0],\n","                     [0.0, 0.0, Q66]])\n","\n","def transform_Q(Q, theta_deg):\n","    theta = np.radians(theta_deg)\n","    c, s = np.cos(theta), np.sin(theta)\n","    T_inv = np.array([[ c**2,   s**2,   2*c*s],\n","                      [ s**2,   c**2,  -2*c*s],\n","                      [-c*s,    c*s,   (c**2 - s**2)]])\n","    return T_inv.T @ Q @ T_inv\n","\n","def compute_ABD(layup, ply_thickness, E1, E2, G12, nu12, nu21):\n","    n_plies = len(layup)\n","    h_total = n_plies * ply_thickness\n","    z_interfaces = np.linspace(-h_total/2, h_total/2, n_plies+1)[::-1]\n","    Q_0deg = get_Q(E1, E2, G12, nu12, nu21)\n","    A = np.zeros((3,3))\n","    B = np.zeros((3,3))\n","    D = np.zeros((3,3))\n","    for i, theta_deg in enumerate(layup):\n","        Q_bar = transform_Q(Q_0deg, theta_deg)\n","        z_top = z_interfaces[i]\n","        z_bottom = z_interfaces[i+1]\n","        dz = z_top - z_bottom\n","        A += Q_bar * dz\n","        B += 0.5 * Q_bar * (z_top**2 - z_bottom**2)\n","        D += (1.0/3.0) * Q_bar * (z_top**3 - z_bottom**3)\n","    ABD = np.block([[A, B], [B, D]])\n","    return ABD, A, B, D, z_interfaces\n","\n","def tsai_hill_failure_index(sigma1, sigma2, tau12, X, Y, S):\n","    term1 = (sigma1**2) / (X**2)\n","    term2 = (sigma2**2) / (Y**2)\n","    term3 = (tau12**2) / (S**2)\n","    cross_term = -(sigma1 * sigma2) / (X**2)\n","    return term1 + term2 + term3 + cross_term\n","\n","def evaluate_layup(layup, ply_thickness, E1, E2, G12, nu12, nu21, Mx, allowable_stress,\n","                   X_strength, Y_strength, S_strength):\n","    N = np.array([0.0, 0.0, 0.0])\n","    M = np.array([Mx, 0.0, 0.0])\n","    NM = np.concatenate([N, M])\n","    ABD, A, B, D, z_interfaces = compute_ABD(layup, ply_thickness, E1, E2, G12, nu12, nu21)\n","    eps0_kappa = np.linalg.solve(ABD, NM)\n","    eps0 = eps0_kappa[0:3]\n","    kappa = eps0_kappa[3:6]\n","    eps_global_top = eps0 + z_interfaces[0] * kappa\n","    Q_0deg = get_Q(E1, E2, G12, nu12, nu21)\n","    Q_bar_top = transform_Q(Q_0deg, layup[0])\n","    stress_global_top = Q_bar_top @ eps_global_top\n","    max_stress = np.max(np.abs(stress_global_top))\n","    meets_design = max_stress <= allowable_stress\n","\n","    detailed_results = []\n","    def to_local_stress(stress_global, theta_deg):\n","        theta = np.radians(theta_deg)\n","        c, s = np.cos(theta), np.sin(theta)\n","        T_sig = np.array([\n","           [ c**2,  s**2,   2*c*s],\n","           [ s**2,  c**2,  -2*c*s],\n","           [-c*s,   c*s,   (c**2 - s**2)]\n","        ])\n","        return T_sig @ stress_global\n","\n","    for i in range(len(layup)):\n","        z_top_ply = z_interfaces[i]\n","        z_bot_ply = z_interfaces[i+1]\n","        theta_deg = layup[i]\n","        eps_global_top_ply = eps0 + z_top_ply * kappa\n","        eps_global_bot_ply = eps0 + z_bot_ply * kappa\n","        Q_bar = transform_Q(Q_0deg, theta_deg)\n","        stress_global_top_ply = Q_bar @ eps_global_top_ply\n","        stress_global_bot_ply = Q_bar @ eps_global_bot_ply\n","        stress_local_top = to_local_stress(stress_global_top_ply, theta_deg)\n","        stress_local_bot = to_local_stress(stress_global_bot_ply, theta_deg)\n","        sigma1_top, sigma2_top, tau12_top = stress_local_top\n","        sigma1_bot, sigma2_bot, tau12_bot = stress_local_bot\n","        FI_top = tsai_hill_failure_index(sigma1_top, sigma2_top, tau12_top, X_strength, Y_strength, S_strength)\n","        FI_bot = tsai_hill_failure_index(sigma1_bot, sigma2_bot, tau12_bot, X_strength, Y_strength, S_strength)\n","        detailed_results.append({\n","            \"ply\": i+1,\n","            \"theta_deg\": theta_deg,\n","            \"z_top\": z_top_ply,\n","            \"z_bottom\": z_bot_ply,\n","            \"stress_local_top\": stress_local_top,\n","            \"stress_local_bottom\": stress_local_bot,\n","            \"FI_top\": FI_top,\n","            \"FI_bottom\": FI_bot\n","        })\n","    return {\n","        \"layup\": layup,\n","        \"max_stress\": max_stress,\n","        \"eps0\": eps0,\n","        \"kappa\": kappa,\n","        \"meets_design\": meets_design,\n","        \"detailed_results\": detailed_results\n","    }\n","\n","# -----------------------------------------------\n","# Streamlit GUI\n","# -----------------------------------------------\n","st.title(\"CLT Laminate Analysis GUI\")\n","\n","# Sidebar inputs for material properties\n","st.sidebar.header(\"Material Properties\")\n","E1 = st.sidebar.number_input(\"E1 (psi)\", value=2.00e7, format=\"%.2e\")\n","E2 = st.sidebar.number_input(\"E2 (psi)\", value=1.30e6, format=\"%.2e\")\n","G12 = st.sidebar.number_input(\"G12 (psi)\", value=1.00e6, format=\"%.2e\")\n","nu12 = st.sidebar.number_input(\"ν12\", value=0.30, step=0.01)\n","nu21 = st.sidebar.number_input(\"ν21\", value=0.02, step=0.01)\n","ply_thickness = st.sidebar.number_input(\"Ply Thickness (in)\", value=0.005, step=0.001)\n","\n","st.sidebar.header(\"Strength Properties (psi)\")\n","X_strength = st.sidebar.number_input(\"Fiber Strength, X (psi)\", value=150000.0)\n","Y_strength = st.sidebar.number_input(\"Transverse Strength, Y (psi)\", value=10000.0)\n","S_strength = st.sidebar.number_input(\"Shear Strength, S (psi)\", value=8000.0)\n","\n","st.sidebar.header(\"Loading Conditions\")\n","Mx = st.sidebar.number_input(\"Bending Moment Mx (in-lb/in)\", value=5.0)\n","allowable_stress = st.sidebar.number_input(\"Allowable Max Stress (psi)\", value=100000.0)\n","\n","st.sidebar.header(\"Layup Settings\")\n","# Candidate layups for symmetric 4-ply laminates: [A, B, B, A]\n","allowed_angles = st.sidebar.multiselect(\"Allowed Ply Angles (°)\", [0.0, 45.0, -45.0, 90.0], default=[0.0, 45.0])\n","candidate_layups = []\n","if allowed_angles:\n","    for A in allowed_angles:\n","        for B in allowed_angles:\n","            candidate_layups.append([A, B, B, A])\n","else:\n","    st.error(\"Please select at least one ply angle.\")\n","\n","# Run analysis button\n","if st.button(\"Run Analysis\"):\n","    st.subheader(\"Candidate Layups (Symmetric 4-Ply)\")\n","    st.write(candidate_layups)\n","    feasible_results = []\n","    for layup in candidate_layups:\n","        result = evaluate_layup(layup, ply_thickness, E1, E2, G12, nu12, nu21, Mx, allowable_stress,\n","                                X_strength, Y_strength, S_strength)\n","        if result[\"meets_design\"]:\n","            feasible_results.append(result)\n","    if feasible_results:\n","        st.subheader(\"Feasible Layups Meeting the Design Criteria\")\n","        for res in feasible_results:\n","            st.write(\"Layup:\", res[\"layup\"], \"-> Max Stress: {:.2f} psi\".format(res[\"max_stress\"]))\n","            st.write(\"Mid-plane strains (ε₀):\", res[\"eps0\"])\n","            st.write(\"Curvatures (κ):\", res[\"kappa\"])\n","            st.write(\"Detailed Ply Results:\")\n","            for ply in res[\"detailed_results\"]:\n","                st.write(f\"Ply {ply['ply']} (θ = {ply['theta_deg']}°):\")\n","                st.write(f\"  z_top = {ply['z_top']:.4f} in, z_bottom = {ply['z_bottom']:.4f} in\")\n","                st.write(\"  Local Stresses (Top):\", ply[\"stress_local_top\"])\n","                st.write(\"  Local Stresses (Bottom):\", ply[\"stress_local_bottom\"])\n","                st.write(\"  Tsai-Hill FI (Top): {:.2f}\".format(ply[\"FI_top\"]))\n","                st.write(\"  Tsai-Hill FI (Bottom): {:.2f}\".format(ply[\"FI_bottom\"]))\n","    else:\n","        st.warning(\"No layups meet the design criteria.\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZNreKN_cftsq","executionInfo":{"status":"ok","timestamp":1743412846642,"user_tz":-330,"elapsed":323,"user":{"displayName":"Prerna Singh","userId":"15536575141784551691"}},"outputId":"6a484cd4-3d04-4c2d-ecb8-4abba222a5c9"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-03-31 09:20:46.204 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.283 \n","  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n","  command:\n","\n","    streamlit run /usr/local/lib/python3.11/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n","2025-03-31 09:20:46.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.285 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.288 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.289 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.291 Session state does not function when running a script without `streamlit run`\n","2025-03-31 09:20:46.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.294 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.299 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.299 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.300 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.301 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.301 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.302 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.302 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.303 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.303 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.304 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.305 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.305 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.306 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.306 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.307 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.307 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.308 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.309 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.313 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.314 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.314 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.316 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.317 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.317 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.318 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.319 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.319 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.320 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.320 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.321 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.322 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.322 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.323 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.323 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.324 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.325 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.325 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.326 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.326 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.327 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.328 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.328 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.329 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.330 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.330 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.331 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.331 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.332 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.340 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.342 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.344 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.345 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.346 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.347 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.348 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.349 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.350 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.351 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.352 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.353 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.353 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.355 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.356 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.357 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.358 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-03-31 09:20:46.358 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}]}]}